Arithmetic Formatter

Create a function that receives a list of strings that are arithmetic problems
and returns the problems arranged vertically and side-by-side. 
The function should optionally take a second argument. 
 When the second argument is set to True, the answers should be displayed.
Situations that will return an error:(Constraints)
1.The limit is five, anything more will return: Error: Too many problems.
2.function will accept are addition and subtraction.Error: Operator must be '+' or '-'.
3. Each number (operand) should only contain digits. Otherwise, the function will return: 
Error: Numbers must only contain digits.
4.Each operand (aka number on each side of the operator) has a max of four digits in width.
Error: Numbers cannot be more than four digits.
RULES TO FOLLOW :
1.There should be a single space between the operator and the longest of the two operands, 
the operator will be on the same line as the second operand, both operands will be in the same order
 as provided (the first will be the top one and the second will be the bottom.
2.Numbers should be right-aligned.
3.There should be four spaces between each problem.
4. There should be dashes at the bottom of each problem. The dashes should run along the entire length
of each problem individually. 


Trail
def arithmetic_arranger(problems,calc= False):
  top = ''
  bottom = ''
  end = ''
  # check if no. of problems is less than 6
  if len(problems)<6:
    #loop each problem from the entire problem list
    for problem in problems:
      # split each term of each problem
      term = problem.split()
      # check if operator is + and - only
      if term[1] == '+' or term[1] == '-':
        # check if only digits are at pos 0 and 2 
        if term[0].isnumeric() and term[2].isnumeric():
          # check if any number(operand) is more than 4
          if len(term[0])<5 and len(term[2])<5:
            #first iteration right justify top ,bottom , ans .
            if top == '':
              top = term[0].rjust(max(len(term[2]),len(term[0]))+2) 
              bottom = term[1] + term[2].rjust(max(len(term[2]),len(term[0]))+1)
              end = '-'*(max(len(term[2]),len(term[0]))+2)
              # incase of solution check if it is add(+) or subs(-)
              if term[1] == '+':
                sum = int(term[0])+ int(term[2])
                ans = str(sum).rjust(max(len(term[2]),len(term[0]))+2)
              elif term[1] == '-':
                sum = int(term[0]) - int(term[2])
                ans = str(sum).rjust(max(len(term[2]),len(term[0]))+2)
                # second onward iteration
            else:
              top = top + '    ' + term[0].rjust(max(len(term[2]),len(term[0]))+2) 
              bottom =bottom + '    ' + term[1] + term[2].rjust(max(len(term[2]),len(term[0]))+1)
              end = end + '    ' + '-'*(max(len(term[2]),len(term[0]))+2)
              if term[1] == '+':
                sum = int(term[0])+ int(term[2])
                ans = ans + '    ' + str(sum).rjust(max(len(term[2]),len(term[0]))+2)
              elif term[1] == '-':
                # convert ans back to string
                sum = int(term[0]) - int(term[2])
                ans = ans + '    ' + str(sum).rjust(max(len(term[2]),len(term[0]))+2)
                # error messages in return to exit the function
          elif len(term[0])>=5 or len(term[2])>=5:
            return ('Error: Numbers cannot be more than four digits.')
        elif not(term[0].isnumeric()) or not(term[2].isnumeric()) :
          return ('Error: Numbers must only contain digits.')
      elif term[1] != '+' or term[1] != '-':
        return ("Error: Operator must be '+' or '-'.")
  elif len(problems)>=6:
    return ('Error: Too many problems.') 
    # if calc is true than we have to solve the problem
  if calc:
    arranged_problems = top + '\n' + bottom + '\n' + end + '\n' + ans
    return arranged_problems
  else:
    arranged_problems = top + '\n' + bottom + '\n' + end 
    return arranged_problems


*******Test ********************************************************

import pytest

from arithmetic_arranger import arithmetic_arranger

test_cases = [
    pytest.param(
        [['3801 - 2', '123 + 49']],
        '  3801      123\n'
        '-    2    +  49\n'
        '------    -----',
        'Expected different output when calling "arithmetic_arranger()" with ["3801 - 2", "123 + 49"]',
        id='test_two_problems_arrangement1'),
    pytest.param(
        [['1 + 2', '1 - 9380']],
        '  1         1\n'
        '+ 2    - 9380\n'
        '---    ------',
        'Expected different output when calling "arithmetic_arranger()" with ["1 + 2", "1 - 9380"]',
        id='test_two_problems_arrangement2'),
    pytest.param(
        [['3 + 855', '3801 - 2', '45 + 43', '123 + 49']],
        '    3      3801      45      123\n'
        '+ 855    -    2    + 43    +  49\n'
        '-----    ------    ----    -----',
        'Expected different output when calling "arithmetic_arranger()" with ["3 + 855", "3801 - 2", "45 + 43", "123 + 49"]',
        id='test_four_problems_arrangement'),
    pytest.param(
        [['11 + 4', '3801 - 2999', '1 + 2', '123 + 49', '1 - 9380']],
        '  11      3801      1      123         1\n'
        '+  4    - 2999    + 2    +  49    - 9380\n'
        '----    ------    ---    -----    ------',
        'Expected different output when calling "arithmetic_arranger()" with ["11 + 4", "3801 - 2999", "1 + 2", "123 + 49", "1 - 9380"]',
        id='test_five_problems_arrangement'),
    pytest.param(
        [['44 + 815', '909 - 2', '45 + 43', '123 + 49',
          '888 + 40', '653 + 87']],
        'Error: Too many problems.',
        'Expected calling "arithmetic_arranger()" with more than five problems to return "Error: Too many problems."',
        id='test_too_many_problems'),
    pytest.param(
        [['3 / 855', '3801 - 2', '45 + 43', '123 + 49']],
        "Error: Operator must be '+' or '-'.",
        '''Expected calling "arithmetic_arranger()" with a problem that uses the "/" operator to return "Error: Operator must be '+' or '-'."''',
        id='test_incorrect_operator'),
    pytest.param(
        [['24 + 85215', '3801 - 2', '45 + 43', '123 + 49']],
        'Error: Numbers cannot be more than four digits.',
        'Expected calling "arithmetic_arranger()" with a problem that has a number over 4 digits long to return "Error: Numbers cannot be more than four digits."',
        id='test_too_many_digits'),
    pytest.param(
        [['98 + 3g5', '3801 - 2', '45 + 43', '123 + 49']],
        'Error: Numbers must only contain digits.',
        'Expected calling "arithmetic_arranger()" with a problem that contains a letter character in the number to return "Error: Numbers must only contain digits."',
        id='test_only_digits'),
    pytest.param(
        [['3 + 855', '988 + 40'], True],
        '    3      988\n'
        '+ 855    +  40\n'
        '-----    -----\n'
        '  858     1028',
        'Expected solutions to be correctly displayed in output when calling "arithmetic_arranger()" with ["3 + 855", "988 + 40"] and a second argument of `True`.',
        id='test_two_problems_with_solutions'),
    pytest.param(
        [['32 - 698', '1 - 3801', '45 + 43', '123 + 49', '988 + 40'], True],
        '   32         1      45      123      988\n'
        '- 698    - 3801    + 43    +  49    +  40\n'
        '-----    ------    ----    -----    -----\n'
        ' -666     -3800      88      172     1028',
        'Expected solutions to be correctly displayed in output when calling "arithmetic_arranger()" with five arithmetic problems and a second argument of `True`.',
        id='test_five_problems_with_solutions'),
]


@pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)
def test_template(arguments, expected_output, fail_message):
    actual = arithmetic_arranger(*arguments)
    assert actual == expected_output, fail_message

************Main*****************************************************************
# This entrypoint file to be used in development. Start by reading README.md
from pytest import main

from arithmetic_arranger import arithmetic_arranger


print(arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"]))


# Run unit tests automatically
main()

